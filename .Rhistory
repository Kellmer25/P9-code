BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
### Preliminaries -------------------------------------------------------------
suppressMessages({
library(dplyr)
library(lubridate)
library(magrittr)
library(tidyr)
})
### Magic numbers -------------------------------------------------------------
Tend <- 6.5
N <- Tend*3600
beta0 <- -5/16
beta1 <- 1/8
Tinterval <- seq(0,Tend, by = Tend/N)
### Functions -----------------------------------------------------------------
OU_exact <- function(alpha = -1/40, sigma = 1, Tend = 6.5, N = 23400){
# X0 <- rnorm(1,0,(-2*alpha)^(-1))
X0 <- 22.1559
OU <- rep(X0,N+1)
xi <- rnorm(N,0,1)
t_inc <- Tend/N
for (k in 1:N) {
OU[k+1] <- exp(-alpha*t_inc)*OU[k] +
sigma*sqrt(1/(2*alpha)*(1-exp(-2*alpha*t_inc)))*xi[k]
}
return(OU)
}
BM_exact <- function(Tend, N){
t_inc <- T/N
BM <- cumsum(c(0,rnorm(N,0,t_inc)))
return(BM)
}
a_func <- function(a,t_inc){
return(a*t_inc)
}
b_func <- function(rho, sigma, BM_inc){
return(rho*sigma*BM_inc[1] + sqrt(1-rho^2)*sigma*BM_inc[2])
}
EM_scheme <- function(BM, Tend=6.5, N = 23400, a = 0.03, rho = -0.3){
X0 <- 1
X <- rep(X0,N+1)
t_inc <- Tend/N
#Brownian Motions
n_BM <- ncol(BM)
BM_inc <- matrix(nrow = N,ncol = n_BM)
for (i in 1:n_BM){
BM_inc[,i] <- diff(BM[,i])
}
#OU Volatility
sigma <- OU_exact()
for (i in 1:N){
X[i+1] = X[i] + a_func(a,t_inc) + b_func(rho, sigma[i+1], BM_inc[i,])
}
return(X)
}
### ---------------------------------------------------------------------------
BM <- matrix(nrow=N+1, ncol = 3)
BM[,1] <- BM_exact(Tend, N)
BM[,2] <- BM_exact(Tend, N)
BM[,3] <- BM_exact(Tend, N)
res1 <- EM_scheme(BM = BM[,-1])
res2 <- EM_scheme(BM = BM[,-2])
plot(Tinterval, res1, type = "l", ylim = c(min(c(res1,res2)),max(c(res1,res2))))
lines(x=Tinterval, y=res2)
